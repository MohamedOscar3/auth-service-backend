name: NestJS Auth CI/CD

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check formatting with Prettier
        run: npm run format:check

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: build
    environment: DOCKER_USERNAME
    outputs:
      docker_creds_available: ${{ steps.check-docker-creds.outputs.docker_creds_available }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/auth-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}
      # Make the deploy job conditional on having Docker credentials
      - name: Check if Docker credentials are available
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "docker_creds_available=true" >> $GITHUB_OUTPUT
            echo "Docker credentials are available"
          else
            echo "docker_creds_available=false" >> $GITHUB_OUTPUT
            echo "Docker credentials are NOT available"
          fi

      - name: Login to Docker Hub
        if: steps.check-docker-creds.outputs.docker_creds_available == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        if: steps.check-docker-creds.outputs.docker_creds_available == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build Docker image without pushing (when credentials are missing)
        if: steps.check-docker-creds.outputs.docker_creds_available != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: auth-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker
    environment: DOCKER_USERNAME
    # Only run deployment if Docker credentials are available
    if: success() && needs.docker.outputs.docker_creds_available == 'true'

    steps:
      - name: Check if EC2 credentials are available
        id: check-ec2-creds
        run: |
          if [ -n "${{ secrets.EC2_HOST }}" ] && [ -n "${{ secrets.EC2_USERNAME }}" ] && [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "ec2_creds_available=true" >> $GITHUB_OUTPUT
            echo "EC2 credentials are available"
          else
            echo "ec2_creds_available=false" >> $GITHUB_OUTPUT
            echo "EC2 credentials are NOT available"
          fi

      - name: Deploy to EC2
        if: steps.check-ec2-creds.outputs.ec2_creds_available == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to Docker Hub
            echo "Logging in to Docker Hub..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            # Pull the latest image
            echo "Pulling the latest image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

            # Stop and remove the existing container if it exists
            echo "Stopping existing container..."
            docker stop auth-service || true
            docker rm auth-service || true

            # Run the new container
            echo "Starting new container..."
            docker run -d \
              --name auth-service \
              --restart always \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e JWT_EXPIRES_IN="${{ secrets.JWT_EXPIRES_IN }}" \
              -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
              ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

            # Clean up old images
            echo "Cleaning up old images..."
            docker system prune -af
